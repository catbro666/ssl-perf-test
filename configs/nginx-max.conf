user root;
worker_priority -10;
worker_processes auto;
worker_cpu_affinity auto;
pid logs/trp.pid;
worker_rlimit_nofile 1000000; #Set this to a high number, as this is an OS optimization that will ensure no file handle issues.
error_log logs/error.log  error;
master_process on;

#ssl_engine xxxxx.so;

events
{
    use epoll;    #The epoll module is important for performance.  It set the behavior to poll on events coming from IO.
    worker_connections 30000;  #This directive tells how many connections a worker_process can have.  Ensure to never set this too low or high. To low will prevent getting good performance, and too high may CPU starve connections.
#    multi_accept on;  #This directive allows worker_processes to handle multiple connections at a time rather than dealing with only one at a time.
    accept_mutex off;  #This directive tells the worker_processes to get in a line rather than all rush for a new connection.
}

http
{
    ssl_buffer_size 4096; #This is telling nginx to use 64KB buffers when dealing with TLS records
    access_log off;
    sendfile on;  #An optimization that allows for file data to transfer within the kernel from file descriptor to file descriptor rather than leaving the kernel, heading to user space, and then going back into kernel space.
    server {
        listen 55555 ssl reuseport backlog=131072 deferred so_keepalive=off; #Reuseport will provide the kernel behavior of load balancing incoming connections to the available NGINX socket listeners.  There is an NGINX socket listener per server block, the block we currently are in now. So if you have one serv

	    #ssl_handshake_timeout 300s;
	    client_header_timeout 300s;
	    client_body_timeout 300s;
	    send_timeout 300s;

        keepalive_requests  10000;
        keepalive_timeout  600s; #Even though TCP keepalives are disabled, we still set it to a value of 0
        tcp_nopush on;  #This directive tells NGINX to wait to send data once it has a payload the size of MSS or Max Segment Size.  This is a follow on to Nagles Algorithm.
        tcp_nodelay on;  #This works opposite of tcp_nopush, where here we do not delay when sending data. We set this to ensure packets get sent without delaying for some period of time. This is to reduce latency.

        lingering_close off; #We immediately close the TCP connection without waiting.
        lingering_time 1;  #We still set this even though we disabled lingering delay.

        ssl_session_cache   off;
        #ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_session_tickets off;    #We do not cache ssl session information to ensure freshness of connections.
	
    	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    	ssl_ciphers ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-AES256-SHA:AES256-SHA:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256;
    	ssl_certificate pem/xxx.pem;
    	ssl_certificate_key pem/xxx.key;
    	ssl_client_certificate pem/ca;

        ssl_verify_client on;  #verify client certificates.
#        ssl_verify_client off;  #do not verify client certificates.

        ssl_prefer_server_ciphers   on;  #During SSL handshake we use this to ensure server ciphers have precedence.

#        proxy_cache cache_zone | off;
#        proxy_cache_path /data/nginx/cache levels=1:2 keys_zone=cache_zone:10m;
        location / {
            root   html;
            index  index.html index.htm;
        }
    }
}
